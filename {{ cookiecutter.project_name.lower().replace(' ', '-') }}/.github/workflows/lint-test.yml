name: Lint and test

on:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "{{ cookiecutter.python_version }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Load cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: {% raw %}venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/uv.lock') }}{% endraw %}

      - name: Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: uv sync --locked --all-extras --dev

      - name: Check dependencies
        run: make check-dependencies

      - name: Check codestyle
        run: make check-codestyle

      - name: ruff
        run: make check-ruff-github

      - name: mypy
        run: make check-mypy

  test:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "{{ cookiecutter.python_version }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Load cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: {% raw %}venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/uv.lock') }}{% endraw %}

      - name: Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: uv sync --locked --all-extras --dev

      - name: Run tests
        run: make test

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: reports/coverage.xml
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Add Coverage Report to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
