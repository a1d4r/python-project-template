[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
package-mode = false
name = "{{ cookiecutter.project_name.lower().replace(' ', '-') }}"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
python = "^{{ cookiecutter.python_version }}"
{%- if cookiecutter.install_pydantic %}
pydantic = "^2.6.4"
{%- endif %}

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
mypy = "^1.15.0"
pre-commit = "^4.2.0"
pytest = "^8.3.5"
pytest-cov = "^5.0.0"
coverage = "^7.8.0"
typeguard = "^4.4.2"
ruff = "^0.11.8"
safety = "^3.4.0"
deptry = "^0.23.0"
{%- if cookiecutter.git_platform == 'gitlab' %}
mypy-gitlab-code-quality = "^1.3.0"
{%- endif %}

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
junit_xml = "reports/mypy.xml"
python_version = "{{ cookiecutter.python_version }}"
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
color_output = true
{%- if cookiecutter.install_pydantic %}
plugins = ["pydantic.mypy"]
{% endif %}
strict = true  # https://mypy.readthedocs.io/en/stable/existing_code.html#introduce-stricter-options
ignore_missing_imports = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
{% if cookiecutter.install_pydantic %}
[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
{% endif %}
[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
filterwarnings = ["error", "ignore::DeprecationWarning", "ignore::ImportWarning"]
testpaths = ["{{ cookiecutter.package_name }}", "tests"]
xfail_strict = true

# Extra options:
addopts = [
  "--color=yes",
  "--failed-first",
  "--strict-config",
  "--strict-markers",
  "--tb=short",
  "--verbosity=2",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--typeguard-packages={{ cookiecutter.package_name }}",
  "--cov",
  "--junitxml=reports/junit.xml"
]

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
data_file = "reports/.coverage"
source = ["{{ cookiecutter.package_name }}"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.pylint.basic]
class-attribute-naming-style = "any"
class-const-naming-style = "any"
good-names = ["i", "j", "k", "e", "x", "id", "_", "pk"]

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.ruff]  # https://github.com/charliermarsh/ruff
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "D", # pydocstyle
  "TD", # flake8-todos
  "FIX", # flake8-fixme
  "ANN", # flake8-annotations (handled by mypy)
  "EM", # flake8-errmsg - String literals in exceptions
  "E501", # pycodestyle - line too long (handled by formatter)
  "COM812", # forced by ruff formatter
  "ISC001", # forced by ruff formatter
  "TRY003", # long message for exceptions
  "EM101", # allow string literals for exceptions
  "EM102", # allow f-string literals for exceptions
]
unfixable = [
  "F", # pyflakes
  "ERA", # eradicate - commented-out code
]
allowed-confusables = [
  "а", "А", "б", "Б", "в", "В", "г", "Г", "е", "Е", "з", "З", "и", "И", "к", "К", "м", "М",
  "н", "Н", "о", "О", "р", "Р", "с", "С", "т", "Т", "у", "У", "ф", "Ф", "х", "Х"  # Allow cyrillic letters
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F401", # Unused import
  "F403", # Import star
  "ARG001", # Unused function argument (using fixtures from other fixtures)
]
"tests/**/*.py" = [
  "S101", # Use of assert detected (assert allowed in tests)
  "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.flake8-tidy-imports]  # https://docs.astral.sh/ruff/settings/#lintflake8-tidy-imports
ban-relative-imports = "all"

[tool.ruff.lint.flake8-boolean-trap]  # https://docs.astral.sh/ruff/settings/#lintflake8-bugbear
extend-allowed-calls = ["pydantic.Field", "django.db.models.Value"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.flake8-bugbear]  # https://docs.astral.sh/ruff/settings/#lintflake8-bugbear
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body", "fastapi_filter.FilterDepends"]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.isort]  # https://docs.astral.sh/ruff/settings/#isort
section-order = ["future", "typing", "standard-library", "third-party", "first-party", "local-folder"]
lines-between-types = 1
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
"typing" = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  # Allow Pydantic's `@validator` decorator to trigger class method treatment.
  "pydantic.validator",
  # Allow SQLAlchemy's dynamic decorators, like `@field.expression`, to trigger class method treatment.
  "declared_attr",
  "expression",
  "comparator",
]

[tool.ruff.lint.pycodestyle]  # https://docs.astral.sh/ruff/settings/#pycodestyle
max-doc-length = 100

[tool.ruff.lint.pydocstyle]  # https://docs.astral.sh/ruff/settings/#pydocstyle
convention = "google"

[tool.ruff.lint.pylint]  # https://docs.astral.sh/ruff/settings/#pylint
allow-dunder-method-names = ["__tablename__", "__table_args__"]
allow-magic-value-types = ["int", "str", "bytes"]
max-args = 10
max-statements = 30

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = true

[tool.deptry.per_rule_ignores]
DEP002 = []
DEP003 = []
